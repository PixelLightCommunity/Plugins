>> 11.07.2012
[CO]
- "SRPWindow::ResizeWindow()": With every resize call, a new texture was created without destroying the previous texture



>> 09.07.2012
[IJH]
- Added documentation to SRPWindow methods
- Cleanup for some destruction methods
- trivial renaming



>> 08.07.2012
[IJH]
- Added documentation to Gui methods



>> 07.07.2012
[IJH]
- Changed names on variables to be consistent with PixelLight, see http://pixellight.sourceforge.net/docs/PixelLightConventions.pdf (2.18 Prefix)
- Added documentation to berkelium callback methods



>> 05.07.2012
[IJH]
 - Warnings that i am not sure about
   -> "SRPWindows::~SRPWindows()" warning C4150: deletion of pointer to incomplete type 'PLRenderer::FragmentShader'; no destructor called
   -> "SRPWindows::~SRPWindows()" warning C4150: deletion of pointer to incomplete type 'PLRenderer::VertexShader'; no destructor called
 - Added Gui::ResizeWindowHandler()
 - Implemented the default callback for resizing the window
   -> search for 'todo' in source to get the places of interest



>> 05.07.2012
[CO]
- "SRPWindow::CreateVertexBuffer()" now calls "SRPWindow::UpdateVertexBuffer()" to fill the vertex buffer
  (no duplicated code, easier to maintain)
- "SRPWindow::UpdateVertexBuffer()": Just update the content of the vertex buffer, no need to recreate the whole resource
- "SRPWindow::CreateVertexBuffer()": Removed a color vertex attribute, which was never used
- "SRPWindow::CreateVertexBuffer()": Vertex position had 3 components, but only 2 components were used
- "SRPWindow::Initialize()" allocated a vertex buffer, texture buffer and program instance, but never freed the memory
- "SRPWindow::CreateProgramWrapper()": Lookout! When creating a program, it only internally saves the pointer to the given
  shaders, but does not take over the shader resource control. You need to destroy the shaders if you no longer need them.
  -> This is something I changed in the new renderer system I am currently working on. In there, I now use reference counter
     to make the usage of the resources easier and to avoid such situations I just fixed.
- "SRPWindow": If you don't need to cache a pointer, don't do it. In case of "m_pImageBuffer = m_cImage.GetBuffer()->GetData()"
  you already have the nice image class as part of your class and don't need to care about memory management. Requesting the
  pointer to the internal data is fast and this way you're on the safe side in case the image was changed and the internal data
  had to be recreated. With this approach, you also have on pointer less you have to heavily document.
- "sWidget" has several resource pointers, was allocating them but never freeing them. It's a little bit hard for me to see
  who is creating the resources, who is destroying the resources and how the memory management is designed in general. More
  documentation would probably help. Please review my changes to ensure that I didn't messed it up.
- The "ARGBtoRGBA_GLSL.h" content does not need to be visible to the whole project, keep your header lightweight



>> 04.07.2012
[CO]
- Bugfix "Gui": The memory of "m_pWindows", "m_pTextButtonHandler" and "m_pKeyButtonHandler" was not freed
- When debugging, "SRPWindow::DestroyBerkeliumWindow()" -> "delete m_pBerkeliumWindow" caused a sudden program
  termination without being able to close the application in a clean way. "Berkelium::Window::~Window()" states:
  "\deprecated Use destroy() to avoid interference from custom allocators.". Review this.



>> 03.07.2012
[IJH]
- Renamed the SRPWindows class to SRPWindow, to prevent confusion because that class only manages one window.
- Changed some destruction approaches in Gui and SRPWindow.
- Added some more comment to clarify certain choices.
  -> Throughout the source i commented the things that need to be looked at or subject to change with to following structure /*COMMENT*/.
     This means you can simple search for '/*' to find points of interest.
     There are probably better ways of doing that but for now it is acceptable.



>> 01.07.2012
[CO]
- Added Visual Studio 2011 project files to make it possible to build and debug the project at least a little bit easier
  -> Additional CMake files would be a good idea, have a look at e.g. the dungeon demo to get the idea how this works
- Removed Berkelium includes, better to have the external dependencies completely separated from the own project to avoid version and platform conflicts



>> 29.06.2012
[IJH]
- Added a method for the user to check if a page has loaded.
- Some small changes where made to prevent naming conflicts between PLBerkelium and PLAwesomium, should someone decide to run both plugins in one project.
  (Perhaps for a future benchmark project of some sort)



>> 27.06.2012
[IJH]
- Added comments to source so that its more easier to understand certain structural choices in methods.



>> 19.06.2012
[IJH]
- For preview purposes i am releasing the plugin to the repository, there are however big features that still need to be implemented and or tweaked (buffer update stuff, keyboard control events).
  An usage example will be added to the Examples repository.
  Documentation on functions and usage will be added when the plugin is nearing completion.



>> 18.06.2012
[IJH]
- Adopted PixelLight src and include folder scheme for plugin headers and source files



>> 29.05.2012
[IJH]
- Added const to code, explained here http://duramecho.com/ComputerInformation/WhyHowCppConst.html



>> 19.05.2012
[IJH]
- Research on global destruction https://groups.google.com/d/topic/berkelium/jssYJ2xrJus/discussion



>> 07.05.2012
[IJH]
- No need for Singleton, discussion http://dev.pixellight.org/forum/viewtopic.php?f=6&t=490



>> 28.04.2012
[IJH]
- Initial creation of plugin project