>> 05.07.2012
[CO]
- "SRPWindow::CreateVertexBuffer()" now calls "SRPWindow::UpdateVertexBuffer()" to fill the vertex buffer
  (no duplicated code, easier to maintain)
- "SRPWindow::UpdateVertexBuffer()": Just update the content of the vertex buffer, no need to recreate the whole resource



>> 04.07.2012
[CO]
- Bugfix "Gui": The memory of "m_pWindows", "m_pTextButtonHandler" and "m_pKeyButtonHandler" was not freed



>> 03.07.2012
[IJH]
- Renamed the SRPWindows class to SRPWindow, to prevent confusion because that class only manages one window.
- Added some more comment to clarify certain choices.
  -> Throughout the source i commented the things that need to be looked at or subject to change with to following structure /*COMMENT*/.
     This means you can simple search for '/*' to find points of interest.
     There are probably better ways of doing that but for now it is acceptable.
- Their are some changes i made in PLBerkelium that still need to be mirrored back to PLAwesomium since they use a lot of the same features.
  So expect those changes to be made to PLAwesomium as-well.
  -> Some features will not be finalized until Awesomium releases their RC2 version (which will be within the next weeks).



>> 01.07.2012
[CO]
- Added Visual Studio 2011 project files to make it possible to build and debug the project at least a little bit easier
  -> Additional CMake files would be a good idea, have a look at e.g. the dungeon demo to get the idea how this works
- Removed Awesomium includes, better to have the external dependencies completely separated from the own project to avoid version and platform conflicts



>> 29.06.2012
[IJH]
- Most of the features for PLAwesomium are now implemented, form objects with pop-up such as drop-down menus need to be looked at.
- Keyboard input is also not yet implemented because the current methods as proposed in PLBerkelium are not sufficient.



>> 28.06.2012
[IJH]
- Initial creation of PLAwesomium
- Because Awesomium 1.7 RC1 has been released (http://support.awesomium.com/discussions/announcements/159-awesomium-17-rc1-just-released)
  proper C++ support for VS2010 trough their API finally makes it a viable choice to implement Awesomium into a PixelLight plugin as-well.
  Updates in Awesomium are differently handled then they are in Berkelium therefor the structure of the plugin has to be altered,
  this is why its a wise choice to have 2 separate plugins for these libraries.